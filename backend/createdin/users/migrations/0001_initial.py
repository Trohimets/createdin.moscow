# Generated by Django 4.2.1 on 2023-05-28 15:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('RENTER', 'Renter'), ('LANDLORD', 'Landlord')], max_length=30)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('first_name', models.CharField(max_length=100, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=100, verbose_name='Фамилия')),
                ('middle_name', models.CharField(max_length=100, verbose_name='Отчество')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RenterProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Фамилия')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Отчество')),
                ('job_title', models.CharField(blank=True, max_length=50, null=True, verbose_name='Должность')),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Контактный email')),
                ('phone_number', models.CharField(blank=True, max_length=12, null=True, validators=[django.core.validators.RegexValidator(message='Формат номера телефона: +79999999999', regex='^\\+?7?\\d{10,10}$')], verbose_name='Контактный телефон')),
                ('adress', models.CharField(blank=True, max_length=300, null=True, verbose_name='Адрес организации')),
                ('inn', models.IntegerField(blank=True, null=True, verbose_name='ИНН организации')),
                ('organization_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='Название организации')),
                ('organization_type', models.CharField(choices=[('INDIVIDUAL', 'Физическое лицо'), ('IP', 'Индивидуальный предприниматель'), ('ORGANIZATION', 'Юридическое лицо')], default='INDIVIDUAL', max_length=50, verbose_name='Юридический статус')),
                ('test', models.IntegerField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LandlordProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_title', models.CharField(blank=True, max_length=50, null=True, verbose_name='Должность')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Фамилия')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Отчество')),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Контактный email')),
                ('phone_number', models.CharField(blank=True, max_length=12, null=True, validators=[django.core.validators.RegexValidator(message='Формат номера телефона: +79999999999', regex='^\\+?7?\\d{10,10}$')], verbose_name='Контактный телефон')),
                ('adress', models.CharField(blank=True, max_length=300, null=True, verbose_name='Адрес организации')),
                ('inn', models.IntegerField(blank=True, null=True, verbose_name='ИНН организации')),
                ('organization_name', models.CharField(blank=True, max_length=300, null=True, verbose_name='Название организации')),
                ('organization_type', models.CharField(blank=True, choices=[('IP', 'Индивидуальный предприниматель'), ('ORGANIZATION', 'Юридическое лицо')], max_length=50, verbose_name='Юридический статус')),
                ('test', models.IntegerField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Landlord',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
            managers=[
                ('renter_individual', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Renter',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.user',),
            managers=[
                ('renter_individual', django.db.models.manager.Manager()),
            ],
        ),
    ]
